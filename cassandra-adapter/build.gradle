import ca.coglinc.gradle.plugins.javacc.*

group "ch.unibas.dmi.dbis.polyphenydb"


version = versionMajor + "." + versionMinor + versionQualifier


configurations {
    javacc
}


buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // JavaCC (https://github.com/johnmartel/javaccPlugin)
        classpath group: "ca.coglinc2.javacc", name: "ca.coglinc2.javacc.gradle.plugin", version: "3.0.0"
        // Fmpp
        classpath group: "net.sourceforge.fmpp", name: "fmpp", version: "0.9.16"
        // Lombok (https://plugins.gradle.org/plugin/io.freefair.lombok)
        classpath group: "io.freefair.gradle", name: "lombok-plugin", version: "3.6.6"
    }
    ant.taskdef(name: "fmpp", classname:"fmpp.tools.AntTask", classpath: buildscript.configurations.classpath.asPath)
}


repositories {
    maven {
        // DBIS Nexus
        url "https://dbis-nexus.dmi.unibas.ch/repository/maven2/"
    }
    mavenCentral()
}


apply plugin: "java-library"
apply plugin: "idea"
apply plugin: "io.freefair.lombok"


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}


configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}


sourceCompatibility = 1.8
targetCompatibility = 1.8


dependencies {
    implementation project(":core")

    javacc group: "net.java.dev.javacc", name: "javacc", version: javacc_version

    implementation group: "com.datastax.oss", name: "java-driver-core", version: cassandra_driver_core_version
    implementation group: "com.datastax.oss", name: "java-driver-query-builder", version: cassandra_driver_query_builder_version
    implementation group: "com.datastax.oss", name: "java-driver-mapper-runtime", version: cassandra_driver_query_builder_version


    // --- Test Compile ---
    testCompile project(path: ":core", configuration: "testClasses")

    testCompile group: "junit", name: "junit", version: junit_version

    testCompile group: "org.cassandraunit", name: "cassandra-unit", version: cassandra_unit_version
    testCompile(group: "org.apache.cassandra", name: "cassandra-all", version: cassandra_all_version) { exclude(module: "log4j-over-slf4j") }
}



sourceSets {
    main {
        java {
            srcDirs = ["src/main/java","build/generated-sources"]
            outputDir = file(project.buildDir.absolutePath + "/classes")
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            outputDir = file(project.buildDir.absolutePath + "/test-classes")
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}


/**
 * Compile Pipline
 */
/*task generateFmppSources {
    inputs.dir("src/main/codegen/templates")
    outputs.dir(project.buildDir.absolutePath + "/generated-sources/fmpp")
    doLast {
        ant.fmpp(configuration: "src/main/codegen/config.fmpp",
                sourceRoot: "src/main/codegen/templates",
                outputRoot: project.buildDir.absolutePath + "/generated-sources/fmpp")
    }
}*/
task generateParser (type: CompileJavaccTask) {
//    dependsOn("generateFmppSources")
    getConventionMapping().map("classpath", { configurations.javacc })
    arguments = [static: "false", lookahead: "2"]
    inputDirectory = file(project.projectDir.absolutePath + "/src/main/codegen")
//    inputDirectory = file(project.buildDir.absolutePath + "/generated-sources/fmpp/javacc")
    outputDirectory = file(project.buildDir.absolutePath + "/generated-sources/ch/unibas/dmi/dbis/polyphenydb/cql/parser/impl")
}
//task generateJdbcVersionProperties(type: Copy) {
//    from "src/main/resources/version"
//    into project.buildDir.absolutePath + "/classes"
//    expand(version: project.version, versionMajor: versionMajor, versionMinor: versionMinor, buildTimestamp: new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"))
//}
compileJava {
    dependsOn("generateParser")
//    dependsOn("generateParser", "generateJdbcVersionProperties")
}



/**
 * JavaDoc
 */
javadoc {
    // suppress most of the warnings
    options.addStringOption("Xdoclint:none", "-quiet")
    // Include private fields in JavaDoc
    options.memberLevel = JavadocMemberLevel.PRIVATE
    // Use HTML 5 for JavaDoc
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}



/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "Databases and Information Systems Group, Department Mathematics and Computer Science, University of Basel, Switzerland"
        attributes "Version": "$version"
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
}



/**
 * IntelliJ
 */
idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        outputDir = file("${project.buildDir}/classes")
        testOutputDir = file("${project.buildDir}/test-classes")
    }
}